
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/modeling_features/007-sensor.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_modeling_features_007-sensor.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_modeling_features_007-sensor.py:


.. _sensor_example:

Sensor
======

The :class:`.Sensor` capabilities to analyze the composite structure
is demonstrated in this example. A sensor is used to compute the weight,
area, cost, etc. of the model or specific entities such as ply material,
modeling ply, etc.

.. GENERATED FROM PYTHON SOURCE LINES 36-40

Import modules
--------------

Import the standard library and third-party dependencies.

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: Python

    import pathlib
    import tempfile

    import pyvista








.. GENERATED FROM PYTHON SOURCE LINES 46-47

Import the PyACP dependencies.

.. GENERATED FROM PYTHON SOURCE LINES 47-56

.. code-block:: Python

    from ansys.acp.core import SensorType, UnitSystemType, launch_acp
    from ansys.acp.core.extras import (
        RACE_CARE_NOSE_CAMERA_METER,
        ExampleKeys,
        get_example_file,
        set_plot_theme,
    )









.. GENERATED FROM PYTHON SOURCE LINES 58-60

Set the plot theme for the example. This is optional, and ensures that you get the
same plot style (theme, color map, etc.) as in the online documentation.

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: Python

    set_plot_theme()









.. GENERATED FROM PYTHON SOURCE LINES 64-66

Start ACP and load the model
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 68-69

Get the example file from the server.

.. GENERATED FROM PYTHON SOURCE LINES 69-73

.. code-block:: Python

    tempdir = tempfile.TemporaryDirectory()
    WORKING_DIR = pathlib.Path(tempdir.name)
    acph5_input_file = get_example_file(ExampleKeys.RACE_CAR_NOSE_ACPH5, WORKING_DIR)








.. GENERATED FROM PYTHON SOURCE LINES 74-75

Launch the PyACP server and connect to it.

.. GENERATED FROM PYTHON SOURCE LINES 75-77

.. code-block:: Python

    acp = launch_acp()








.. GENERATED FROM PYTHON SOURCE LINES 78-80

Load the model from the input file which contains a formula 1 front
wing with layup.

.. GENERATED FROM PYTHON SOURCE LINES 80-85

.. code-block:: Python

    model = acp.import_model(acph5_input_file)
    model.unit_system = UnitSystemType.SI
    print(model.unit_system)
    model.update()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    si




.. GENERATED FROM PYTHON SOURCE LINES 86-87

The plot shows the total laminate thickness per element.

.. GENERATED FROM PYTHON SOURCE LINES 87-94

.. code-block:: Python

    thickness_data = model.elemental_data.thickness
    if thickness_data is not None:
        plotter = pyvista.Plotter()
        plotter.add_mesh(thickness_data.get_pyvista_mesh(model.mesh), show_edges=False)
        plotter.camera_position = RACE_CARE_NOSE_CAMERA_METER
        plotter.show()








.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/modeling_features/images/sphx_glr_007-sensor_001.png
        :alt: 007 sensor
        :srcset: /examples/modeling_features/images/sphx_glr_007-sensor_001.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyacp/pyacp/doc/source/examples/modeling_features/images/sphx_glr_007-sensor_001.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 95-96

Set price per area for all fabrics.

.. GENERATED FROM PYTHON SOURCE LINES 96-100

.. code-block:: Python

    model.fabrics["UD"].area_price = 15  # $/m^2
    model.fabrics["woven"].area_price = 23  # $/m^2
    model.fabrics["core_4mm"].area_price = 7  # $/m^2








.. GENERATED FROM PYTHON SOURCE LINES 101-103

Sensor by area
--------------

.. GENERATED FROM PYTHON SOURCE LINES 105-109

Entire Model
~~~~~~~~~~~~
The first sensor is applied to the entire model to compute for example
the total weight, area of production material, and material cost.

.. GENERATED FROM PYTHON SOURCE LINES 109-114

.. code-block:: Python

    sensor_by_area = model.create_sensor(
        name="By Area",
        sensor_type=SensorType.SENSOR_BY_AREA,
        entities=[model.element_sets["All_Elements"]],
    )







.. GENERATED FROM PYTHON SOURCE LINES 115-116

Update the model to compute the sensor values.

.. GENERATED FROM PYTHON SOURCE LINES 116-135

.. code-block:: Python

    model.update()


    def print_measures(my_sensor):
        if my_sensor.price is not None:
            print(f"Price: {my_sensor.price:.2f} $")
        if my_sensor.weight is not None:
            print(f"Weight: {my_sensor.weight:.2f} kg")
        if my_sensor.covered_area is not None:
            print(f"Covered area: {my_sensor.covered_area:.2f} m²")
        if my_sensor.modeling_ply_area is not None:
            print(f"Modeling ply area: {my_sensor.modeling_ply_area:.2f} m²")
        if my_sensor.production_ply_area is not None:
            print(f"Production ply area: {my_sensor.production_ply_area:.2f} m²")
        cog = my_sensor.center_of_gravity
        if cog is not None:
            print(f"Center of gravity: ({cog[0]:.2f}, {cog[1]:.2f}, {cog[2]:.2f}) m")









.. GENERATED FROM PYTHON SOURCE LINES 136-137

Print the values. The ``production ply area`` is the area of production material.

.. GENERATED FROM PYTHON SOURCE LINES 137-139

.. code-block:: Python

    print_measures(sensor_by_area)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Price: 208.84 $
    Weight: 4.48 kg
    Covered area: 1.70 m²
    Modeling ply area: 5.31 m²
    Production ply area: 11.04 m²
    Center of gravity: (0.42, 0.10, -0.09) m




.. GENERATED FROM PYTHON SOURCE LINES 140-145

Scope to a specific component
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Compute the measures for the nose only. Note that :class:`.OrientedSelectionSet`
can also be used to scope the sensor.

.. GENERATED FROM PYTHON SOURCE LINES 145-155

.. code-block:: Python

    eset_nose = model.element_sets["els_nose"]
    sensor_by_area.entities = [eset_nose]
    model.update()
    print_measures(sensor_by_area)
    plotter = pyvista.Plotter()
    plotter.add_mesh(eset_nose.mesh.to_pyvista(), show_edges=False, opacity=1, color="turquoise")
    plotter.add_mesh(model.mesh.to_pyvista(), show_edges=False, opacity=0.2)
    plotter.camera_position = RACE_CARE_NOSE_CAMERA_METER
    plotter.show()








.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/modeling_features/images/sphx_glr_007-sensor_002.png
        :alt: 007 sensor
        :srcset: /examples/modeling_features/images/sphx_glr_007-sensor_002.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyacp/pyacp/doc/source/examples/modeling_features/images/sphx_glr_007-sensor_002.vtksz



.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Price: 25.21 $
    Weight: 0.56 kg
    Covered area: 0.39 m²
    Modeling ply area: 1.18 m²
    Production ply area: 1.64 m²
    Center of gravity: (0.09, 0.37, -0.22) m




.. GENERATED FROM PYTHON SOURCE LINES 156-161

Sensor by material
------------------

A sensor can also be used to compute the amount of a certain ply material
(:class:`.Fabric`, :class:`.Stackup`, :class:`.SubLaminate`).

.. GENERATED FROM PYTHON SOURCE LINES 161-168

.. code-block:: Python

    sensor_by_material = model.create_sensor(
        name="By Material",
        sensor_type=SensorType.SENSOR_BY_MATERIAL,
        entities=[model.fabrics["UD"]],
    )
    print_measures(sensor_by_area)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Price: 25.21 $
    Weight: 0.56 kg
    Covered area: 0.39 m²
    Modeling ply area: 1.18 m²
    Production ply area: 1.64 m²
    Center of gravity: (0.09, 0.37, -0.22) m




.. GENERATED FROM PYTHON SOURCE LINES 169-174

Sensor by ply
-------------

A sensor can also be scoped to a specific ply or a list of plies. In this example,
a ply of the suction side and a ply of the pressure side of wing 3 are selected.

.. GENERATED FROM PYTHON SOURCE LINES 174-194

.. code-block:: Python

    mg = model.modeling_groups["wing_3"]
    modeling_plies = [
        mg.modeling_plies["mp.wing_3.1_suction"],
        mg.modeling_plies["mp.wing_3.1_pressure.2"],
    ]
    sensor_by_ply = model.create_sensor(
        name="By Ply",
        sensor_type=SensorType.SENSOR_BY_PLIES,
        entities=modeling_plies,
    )
    model.update()
    print_measures(sensor_by_ply)
    plotter = pyvista.Plotter()
    for ply in modeling_plies:
        plotter.add_mesh(ply.mesh.to_pyvista(), show_edges=False, opacity=1, color="turquoise")

    plotter.add_mesh(model.mesh.to_pyvista(), show_edges=False, opacity=0.2)
    plotter.camera_position = RACE_CARE_NOSE_CAMERA_METER
    plotter.show()








.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/modeling_features/images/sphx_glr_007-sensor_003.png
        :alt: 007 sensor
        :srcset: /examples/modeling_features/images/sphx_glr_007-sensor_003.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyacp/pyacp/doc/source/examples/modeling_features/images/sphx_glr_007-sensor_003.vtksz



.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Price: 10.86 $
    Weight: 0.23 kg
    Covered area: 0.24 m²
    Modeling ply area: 0.24 m²
    Production ply area: 0.47 m²
    Center of gravity: (0.30, 0.08, -0.10) m




.. GENERATED FROM PYTHON SOURCE LINES 195-204

Sensor by solid model
---------------------

.. note::

    The sensor by solid model is only supported in PyACP from server version 25.2 onwards.

Finally, a sensor can be scoped to a solid model. In this case, only the weight and
center of gravity are computed.

.. GENERATED FROM PYTHON SOURCE LINES 204-218

.. code-block:: Python


    solid_model = model.create_solid_model()
    solid_model.element_sets = [model.element_sets["els_nose"]]
    solid_model.drop_off_material = model.materials["Resin_Epoxy"]

    sensor_by_solid_model = model.create_sensor(
        name="By Solid Model",
        sensor_type=SensorType.SENSOR_BY_SOLID_MODEL,
        entities=[solid_model],
    )

    model.update()
    print_measures(sensor_by_solid_model)
    model.solid_mesh.to_pyvista().plot(show_edges=True)







.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/modeling_features/images/sphx_glr_007-sensor_004.png
        :alt: 007 sensor
        :srcset: /examples/modeling_features/images/sphx_glr_007-sensor_004.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyacp/pyacp/doc/source/examples/modeling_features/images/sphx_glr_007-sensor_004.vtksz



.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Weight: 0.55 kg
    Center of gravity: (0.09, 0.37, -0.22) m





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 33.671 seconds)


.. _sphx_glr_download_examples_modeling_features_007-sensor.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 007-sensor.ipynb <007-sensor.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 007-sensor.py <007-sensor.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 007-sensor.zip <007-sensor.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
